import { Component, JsonFile, Project } from 'projen';

/**
 * Options for the NxConfigComponent
 */
export interface NxConfigOptions {
  /**
   * The version of Nx to use
   * @default '21.1.3'
   */
  readonly version?: string;

  /**
   * The directory where applications are stored
   * @default 'apps'
   */
  readonly appsDir?: string;

  /**
   * The directory where libraries are stored
   * @default 'libs'
   */
  readonly libsDir?: string;

  /**
   * Default base branch for affected commands
   * @default 'main'
   */
  readonly defaultBase?: string;

  /**
   * Custom target defaults configuration
   * @default - see constructor
   */
  readonly targetDefaults?: Record<string, any>;

  /**
   * Custom named inputs configuration
   * @default - see constructor
   */
  readonly namedInputs?: Record<string, any>;

  /**
   * Custom tasks runner options
   * @default - see constructor
   */
  readonly tasksRunnerOptions?: Record<string, any>;
}

/**
 * Component that generates nx.json configuration
 */
export class NxConfigComponent extends Component {
  /**
   * The version of Nx being used
   */
  public readonly version: string;

  /**
   * The apps directory
   */
  public readonly appsDir: string;

  /**
   * The libs directory
   */
  public readonly libsDir: string;

  constructor(project: Project, options: NxConfigOptions = {}) {
    super(project);

    this.version = options.version ?? '21.1.3';
    this.appsDir = options.appsDir ?? 'apps';
    this.libsDir = options.libsDir ?? 'libs';

    const defaultBase = options.defaultBase ?? 'main';

    // Default target defaults based on current nx.json
    const targetDefaults = options.targetDefaults ?? {
      build: {
        dependsOn: ['^build'],
        inputs: ['production', '^production'],
        cache: true,
      },
      test: {
        inputs: ['default', '^production', '{workspaceRoot}/jest.preset.js'],
        cache: true,
      },
      lint: {
        inputs: ['default', '{workspaceRoot}/.eslintrc.json'],
        cache: true,
      },
      dev: {
        cache: false,
      },
    };

    // Default named inputs based on current nx.json
    const namedInputs = options.namedInputs ?? {
      default: ['{projectRoot}/**/*', 'sharedGlobals'],
      production: [
        'default',
        '!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)',
        '!{projectRoot}/tsconfig.spec.json',
        '!{projectRoot}/.eslintrc.json',
        '!{projectRoot}/jest.config.[jt]s',
        '!{projectRoot}/src/test-setup.[jt]s',
      ],
      sharedGlobals: [],
    };

    // Default tasks runner options based on current nx.json
    const tasksRunnerOptions = options.tasksRunnerOptions ?? {
      default: {
        runner: 'nx/tasks-runners/default',
        options: {
          cacheableOperations: ['build', 'lint', 'test', 'e2e'],
        },
      },
    };

    // Generate nx.json file
    new JsonFile(project, 'nx.json', {
      obj: {
        $schema: `https://raw.githubusercontent.com/nrwl/nx/${this.version}/packages/nx/schemas/nx-schema.json`,
        affected: {
          defaultBase,
        },
        workspaceLayout: {
          appsDir: this.appsDir,
          libsDir: this.libsDir,
        },
        targetDefaults,
        namedInputs,
        tasksRunnerOptions,
      },
      marker: true, // Mark this file as generated by projen
    });
  }
}